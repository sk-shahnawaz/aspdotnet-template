using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Mvc.ModelBinding;

namespace ASP.NET.Core.WebAPI.Models.DTOs;

/// <summary>
/// Custom application wise API error response, in accordance with 'Problem Details' specification for HTTP based API systems (https://datatracker.ietf.org/doc/html/rfc7807)
/// </summary>
[SwaggerSchema(Description = "Custom application wise API error response, in accordance with 'Problem Details' specification for HTTP based API systems (https://datatracker.ietf.org/doc/html/rfc7807)")]
public sealed class ErrorResponse
{
    [SwaggerSchema(Description = "The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem")]
    public int Status { get; private set; }

    [SwaggerSchema(Description = "Application specific custom error code, this field is optional")]
    public int? Code { get; private set; }

    [SwaggerSchema(Description = @"A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem,
                                    except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4")]
    public string Title { get; private set; }

    [SwaggerSchema(Description = @"A human-readable explanation specific to this occurrence of the problem")]
    public string Detail { get; private set; }

    [SwaggerSchema(Description = @"A URI reference that identifies the specific occurrence of the problem. It may 
                                    or may not yield further information if dereferenced")]
    public string Instance { get; private set; }

    [SwaggerSchema(Description = @"A URI reference [RFC3986] that identifies the problem type. This specification
                        encourages that, when dereferenced, it provide human-readable documentation for
                        the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member
                        is not present, its value is assumed to be ""about: blank""")]
    public string Type { get; private set; }

    [SwaggerSchema(Description = "The validation errors")]
    public Dictionary<string, List<string>> Errors { get; private set; }

    internal ErrorResponse(ProblemDetails problemDetails, ModelStateDictionary modelState)
    {
        Status = problemDetails.Status ?? StatusCodes.Status500InternalServerError;
        Code = null;    // TODO
        Title = problemDetails.Title;
        Detail = problemDetails.Detail;
        Type = problemDetails.Type;

        problemDetails.Extensions.TryGetValue("traceId", out object traceId);
        Instance = traceId != null ? traceId as string : Guid.NewGuid().ToString().ToUpper();

        Errors = modelState.Where(e => e.Value.Errors.Count > 0).Select(e => new
        {
            PropertyName = e.Key,
            ValidationErrors = e.Value.Errors.Select(err => err.ErrorMessage).ToList()
        })
        .ToDictionary(g => g.PropertyName, g => g.ValidationErrors);
    }
}
